// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "user";

export interface CreateUserRequestDto {
  email: string;
  password: string;
  firstname?: string | undefined;
  lastname?: string | undefined;
}

export interface SigninDto {
  email: string;
  password: string;
}

export interface CreateUserResponseDto {
  id: string;
  email: string;
  firstname?: string | undefined;
  lastname?: string | undefined;
}

function createBaseCreateUserRequestDto(): CreateUserRequestDto {
  return { email: "", password: "", firstname: undefined, lastname: undefined };
}

export const CreateUserRequestDto: MessageFns<CreateUserRequestDto> = {
  encode(message: CreateUserRequestDto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(26).string(message.password);
    }
    if (message.firstname !== undefined) {
      writer.uint32(34).string(message.firstname);
    }
    if (message.lastname !== undefined) {
      writer.uint32(42).string(message.lastname);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUserRequestDto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUserRequestDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.firstname = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.lastname = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateUserRequestDto {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      firstname: isSet(object.firstname) ? globalThis.String(object.firstname) : undefined,
      lastname: isSet(object.lastname) ? globalThis.String(object.lastname) : undefined,
    };
  },

  toJSON(message: CreateUserRequestDto): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.firstname !== undefined) {
      obj.firstname = message.firstname;
    }
    if (message.lastname !== undefined) {
      obj.lastname = message.lastname;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateUserRequestDto>, I>>(base?: I): CreateUserRequestDto {
    return CreateUserRequestDto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateUserRequestDto>, I>>(object: I): CreateUserRequestDto {
    const message = createBaseCreateUserRequestDto();
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    message.firstname = object.firstname ?? undefined;
    message.lastname = object.lastname ?? undefined;
    return message;
  },
};

function createBaseSigninDto(): SigninDto {
  return { email: "", password: "" };
}

export const SigninDto: MessageFns<SigninDto> = {
  encode(message: SigninDto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SigninDto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSigninDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SigninDto {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: SigninDto): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SigninDto>, I>>(base?: I): SigninDto {
    return SigninDto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SigninDto>, I>>(object: I): SigninDto {
    const message = createBaseSigninDto();
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseCreateUserResponseDto(): CreateUserResponseDto {
  return { id: "", email: "", firstname: undefined, lastname: undefined };
}

export const CreateUserResponseDto: MessageFns<CreateUserResponseDto> = {
  encode(message: CreateUserResponseDto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.firstname !== undefined) {
      writer.uint32(34).string(message.firstname);
    }
    if (message.lastname !== undefined) {
      writer.uint32(42).string(message.lastname);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUserResponseDto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUserResponseDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.firstname = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.lastname = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateUserResponseDto {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      firstname: isSet(object.firstname) ? globalThis.String(object.firstname) : undefined,
      lastname: isSet(object.lastname) ? globalThis.String(object.lastname) : undefined,
    };
  },

  toJSON(message: CreateUserResponseDto): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.firstname !== undefined) {
      obj.firstname = message.firstname;
    }
    if (message.lastname !== undefined) {
      obj.lastname = message.lastname;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateUserResponseDto>, I>>(base?: I): CreateUserResponseDto {
    return CreateUserResponseDto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateUserResponseDto>, I>>(object: I): CreateUserResponseDto {
    const message = createBaseCreateUserResponseDto();
    message.id = object.id ?? "";
    message.email = object.email ?? "";
    message.firstname = object.firstname ?? undefined;
    message.lastname = object.lastname ?? undefined;
    return message;
  },
};

export type UserServiceService = typeof UserServiceService;
export const UserServiceService = {
  create: {
    path: "/user.UserService/Create",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateUserRequestDto) => Buffer.from(CreateUserRequestDto.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateUserRequestDto.decode(value),
    responseSerialize: (value: CreateUserResponseDto) => Buffer.from(CreateUserResponseDto.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateUserResponseDto.decode(value),
  },
  signIn: {
    path: "/user.UserService/SignIn",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SigninDto) => Buffer.from(SigninDto.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SigninDto.decode(value),
    responseSerialize: (value: CreateUserResponseDto) => Buffer.from(CreateUserResponseDto.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateUserResponseDto.decode(value),
  },
} as const;

export interface UserServiceServer extends UntypedServiceImplementation {
  create: handleUnaryCall<CreateUserRequestDto, CreateUserResponseDto>;
  signIn: handleUnaryCall<SigninDto, CreateUserResponseDto>;
}

export interface UserServiceClient extends Client {
  create(
    request: CreateUserRequestDto,
    callback: (error: ServiceError | null, response: CreateUserResponseDto) => void,
  ): ClientUnaryCall;
  create(
    request: CreateUserRequestDto,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateUserResponseDto) => void,
  ): ClientUnaryCall;
  create(
    request: CreateUserRequestDto,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateUserResponseDto) => void,
  ): ClientUnaryCall;
  signIn(
    request: SigninDto,
    callback: (error: ServiceError | null, response: CreateUserResponseDto) => void,
  ): ClientUnaryCall;
  signIn(
    request: SigninDto,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateUserResponseDto) => void,
  ): ClientUnaryCall;
  signIn(
    request: SigninDto,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateUserResponseDto) => void,
  ): ClientUnaryCall;
}

export const UserServiceClient = makeGenericClientConstructor(UserServiceService, "user.UserService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): UserServiceClient;
  service: typeof UserServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
